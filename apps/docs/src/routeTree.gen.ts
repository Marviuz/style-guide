/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as DocsImport } from './routes/_docs';
import { Route as IndexImport } from './routes/index';
import { Route as DocsSplatImport } from './routes/_docs/$';

// Create/Update Routes

const DocsRoute = DocsImport.update({
  id: '/_docs',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const DocsSplatRoute = DocsSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => DocsRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_docs': {
      id: '/_docs';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof DocsImport;
      parentRoute: typeof rootRoute;
    };
    '/_docs/$': {
      id: '/_docs/$';
      path: '/$';
      fullPath: '/$';
      preLoaderRoute: typeof DocsSplatImport;
      parentRoute: typeof DocsImport;
    };
  }
}

// Create and export the route tree

interface DocsRouteChildren {
  DocsSplatRoute: typeof DocsSplatRoute;
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsSplatRoute: DocsSplatRoute,
};

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof DocsRouteWithChildren;
  '/$': typeof DocsSplatRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof DocsRouteWithChildren;
  '/$': typeof DocsSplatRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_docs': typeof DocsRouteWithChildren;
  '/_docs/$': typeof DocsSplatRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '' | '/$';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '' | '/$';
  id: '__root__' | '/' | '/_docs' | '/_docs/$';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DocsRoute: typeof DocsRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsRoute: DocsRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_docs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_docs": {
      "filePath": "_docs.tsx",
      "children": [
        "/_docs/$"
      ]
    },
    "/_docs/$": {
      "filePath": "_docs/$.tsx",
      "parent": "/_docs"
    }
  }
}
ROUTE_MANIFEST_END */
